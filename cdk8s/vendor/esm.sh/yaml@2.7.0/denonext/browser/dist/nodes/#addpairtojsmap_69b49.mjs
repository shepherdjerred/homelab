/* esm.sh - yaml@2.7.0/browser/dist/nodes/addPairToJSMap */
import{warn as a}from"../log.mjs";import{isMergeKey as u,addMergeToJSMap as l}from"../schema/yaml-1.1/merge.mjs";import{createStringifyContext as S}from"../stringify/stringify.mjs";import{isNode as d}from"./identity.mjs";import{toJS as s}from"./toJS.mjs";function M(o,e,{key:r,value:i}){if(d(r)&&r.addToJSMap)r.addToJSMap(o,e,i);else if(u(o,r))l(o,e,i);else{let n=s(r,"",o);if(e instanceof Map)e.set(n,s(i,n,o));else if(e instanceof Set)e.add(n);else{let t=c(r,n,o),f=s(i,t,o);t in e?Object.defineProperty(e,t,{value:f,writable:!0,enumerable:!0,configurable:!0}):e[t]=f}}return e}function c(o,e,r){if(e===null)return"";if(typeof e!="object")return String(e);if(d(o)&&r?.doc){let i=S(r.doc,{});i.anchors=new Set;for(let t of r.anchors.keys())i.anchors.add(t.anchor);i.inFlow=!0,i.inStringifyKey=!0;let n=o.toString(i);if(!r.mapKeyWarned){let t=JSON.stringify(n);t.length>40&&(t=t.substring(0,36)+'..."'),a(r.doc.options.logLevel,`Keys with collection values will be stringified due to JS Object restrictions: ${t}. Set mapAsMap: true to use object keys.`),r.mapKeyWarned=!0}return n}return JSON.stringify(e)}export{M as addPairToJSMap};
//# sourceMappingURL=addPairToJSMap.mjs.map