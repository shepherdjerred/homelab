/* esm.sh - yaml@2.7.1/browser/dist/schema/yaml-1.1/merge */
import{isScalar as l,isAlias as a,isSeq as y,isMap as p}from"../../nodes/identity.mjs";import{Scalar as d}from"../../nodes/Scalar.mjs";var i="<<",n={identify:r=>r===i||typeof r=="symbol"&&r.description===i,default:"key",tag:"tag:yaml.org,2002:merge",test:/^<<$/,resolve:()=>Object.assign(new d(Symbol(i)),{addToJSMap:M}),stringify:()=>i},S=(r,e)=>(n.identify(e)||l(e)&&(!e.type||e.type===d.PLAIN)&&n.identify(e.value))&&r?.doc.schema.tags.some(o=>o.tag===n.tag&&o.default);function M(r,e,o){if(o=r&&a(o)?o.resolve(r.doc):o,y(o))for(let s of o.items)f(r,e,s);else if(Array.isArray(o))for(let s of o)f(r,e,s);else f(r,e,o)}function f(r,e,o){let s=r&&a(o)?o.resolve(r.doc):o;if(!p(s))throw new Error("Merge sources must be maps or map aliases");let g=s.toJSON(null,r,Map);for(let[t,c]of g)e instanceof Map?e.has(t)||e.set(t,c):e instanceof Set?e.add(t):Object.prototype.hasOwnProperty.call(e,t)||Object.defineProperty(e,t,{value:c,writable:!0,enumerable:!0,configurable:!0});return e}export{M as addMergeToJSMap,S as isMergeKey,n as merge};
//# sourceMappingURL=merge.mjs.map