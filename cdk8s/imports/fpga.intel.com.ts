// deno-lint-ignore-file
// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from "cdk8s";
import { Construct } from "constructs";

/**
 * AcceleratorFunction is a specification for an Accelerator Function resource
provided by a FPGA-based programmable hardware accelerator.
 *
 * @schema AcceleratorFunction
 */
export class AcceleratorFunction extends ApiObject {
  /**
   * Returns the apiVersion and kind for "AcceleratorFunction"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: "fpga.intel.com/v2",
    kind: "AcceleratorFunction",
  };

  /**
   * Renders a Kubernetes manifest for "AcceleratorFunction".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: AcceleratorFunctionProps): any {
    return {
      ...AcceleratorFunction.GVK,
      ...toJson_AcceleratorFunctionProps(props),
    };
  }

  /**
   * Defines a "AcceleratorFunction" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(
    scope: Construct,
    id: string,
    props: AcceleratorFunctionProps,
  ) {
    super(scope, id, {
      ...AcceleratorFunction.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public override toJson(): any {
    const resolved = super.toJson();

    return {
      ...AcceleratorFunction.GVK,
      ...toJson_AcceleratorFunctionProps(resolved),
    };
  }
}

/**
 * AcceleratorFunction is a specification for an Accelerator Function resource
 * provided by a FPGA-based programmable hardware accelerator.
 *
 * @schema AcceleratorFunction
 */
export interface AcceleratorFunctionProps {
  /**
   * @schema AcceleratorFunction#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * AcceleratorFunctionSpec contains actual specs for AcceleratorFunction.
   *
   * @schema AcceleratorFunction#spec
   */
  readonly spec: AcceleratorFunctionSpec;
}

/**
 * Converts an object of type 'AcceleratorFunctionProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_AcceleratorFunctionProps(
  obj: AcceleratorFunctionProps | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "metadata": obj.metadata,
    "spec": toJson_AcceleratorFunctionSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * AcceleratorFunctionSpec contains actual specs for AcceleratorFunction.
 *
 * @schema AcceleratorFunctionSpec
 */
export interface AcceleratorFunctionSpec {
  /**
   * @schema AcceleratorFunctionSpec#afuId
   */
  readonly afuId: string;

  /**
   * @schema AcceleratorFunctionSpec#interfaceId
   */
  readonly interfaceId: string;

  /**
   * @schema AcceleratorFunctionSpec#mode
   */
  readonly mode: string;
}

/**
 * Converts an object of type 'AcceleratorFunctionSpec' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_AcceleratorFunctionSpec(
  obj: AcceleratorFunctionSpec | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "afuId": obj.afuId,
    "interfaceId": obj.interfaceId,
    "mode": obj.mode,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * FpgaRegion is a specification for a FPGA region resource which can be programmed
with a bitstream.
 *
 * @schema FpgaRegion
 */
export class FpgaRegion extends ApiObject {
  /**
   * Returns the apiVersion and kind for "FpgaRegion"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: "fpga.intel.com/v2",
    kind: "FpgaRegion",
  };

  /**
   * Renders a Kubernetes manifest for "FpgaRegion".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: FpgaRegionProps): any {
    return {
      ...FpgaRegion.GVK,
      ...toJson_FpgaRegionProps(props),
    };
  }

  /**
   * Defines a "FpgaRegion" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: FpgaRegionProps) {
    super(scope, id, {
      ...FpgaRegion.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public override toJson(): any {
    const resolved = super.toJson();

    return {
      ...FpgaRegion.GVK,
      ...toJson_FpgaRegionProps(resolved),
    };
  }
}

/**
 * FpgaRegion is a specification for a FPGA region resource which can be programmed
 * with a bitstream.
 *
 * @schema FpgaRegion
 */
export interface FpgaRegionProps {
  /**
   * @schema FpgaRegion#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * FpgaRegionSpec contains actual specs for FpgaRegion.
   *
   * @schema FpgaRegion#spec
   */
  readonly spec: FpgaRegionSpec;
}

/**
 * Converts an object of type 'FpgaRegionProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_FpgaRegionProps(
  obj: FpgaRegionProps | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "metadata": obj.metadata,
    "spec": toJson_FpgaRegionSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * FpgaRegionSpec contains actual specs for FpgaRegion.
 *
 * @schema FpgaRegionSpec
 */
export interface FpgaRegionSpec {
  /**
   * @schema FpgaRegionSpec#interfaceId
   */
  readonly interfaceId: string;
}

/**
 * Converts an object of type 'FpgaRegionSpec' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_FpgaRegionSpec(
  obj: FpgaRegionSpec | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "interfaceId": obj.interfaceId,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
