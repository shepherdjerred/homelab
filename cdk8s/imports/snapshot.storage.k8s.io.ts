// deno-lint-ignore-file
// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from "cdk8s";
import { Construct } from "constructs";

/**
 * VolumeSnapshot is a user's request for either creating a point-in-time snapshot of a persistent volume, or binding to a pre-existing snapshot.
 *
 * @schema VolumeSnapshot
 */
export class VolumeSnapshot extends ApiObject {
  /**
   * Returns the apiVersion and kind for "VolumeSnapshot"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: "snapshot.storage.k8s.io/v1",
    kind: "VolumeSnapshot",
  };

  /**
   * Renders a Kubernetes manifest for "VolumeSnapshot".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: VolumeSnapshotProps): any {
    return {
      ...VolumeSnapshot.GVK,
      ...toJson_VolumeSnapshotProps(props),
    };
  }

  /**
   * Defines a "VolumeSnapshot" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: VolumeSnapshotProps) {
    super(scope, id, {
      ...VolumeSnapshot.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public override toJson(): any {
    const resolved = super.toJson();

    return {
      ...VolumeSnapshot.GVK,
      ...toJson_VolumeSnapshotProps(resolved),
    };
  }
}

/**
 * VolumeSnapshot is a user's request for either creating a point-in-time snapshot of a persistent volume, or binding to a pre-existing snapshot.
 *
 * @schema VolumeSnapshot
 */
export interface VolumeSnapshotProps {
  /**
   * @schema VolumeSnapshot#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * spec defines the desired characteristics of a snapshot requested by a user. More info: https://kubernetes.io/docs/concepts/storage/volume-snapshots#volumesnapshots Required.
   *
   * @schema VolumeSnapshot#spec
   */
  readonly spec: VolumeSnapshotSpec;
}

/**
 * Converts an object of type 'VolumeSnapshotProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_VolumeSnapshotProps(
  obj: VolumeSnapshotProps | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "metadata": obj.metadata,
    "spec": toJson_VolumeSnapshotSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * spec defines the desired characteristics of a snapshot requested by a user. More info: https://kubernetes.io/docs/concepts/storage/volume-snapshots#volumesnapshots Required.
 *
 * @schema VolumeSnapshotSpec
 */
export interface VolumeSnapshotSpec {
  /**
   * source specifies where a snapshot will be created from. This field is immutable after creation. Required.
   *
   * @schema VolumeSnapshotSpec#source
   */
  readonly source: VolumeSnapshotSpecSource;

  /**
   * VolumeSnapshotClassName is the name of the VolumeSnapshotClass
   * requested by the VolumeSnapshot. VolumeSnapshotClassName may be
   * left nil to indicate that the default SnapshotClass should be used.
   * A given cluster may have multiple default Volume SnapshotClasses:
   * one default per CSI Driver. If a VolumeSnapshot does not specify
   * a SnapshotClass, VolumeSnapshotSource will be checked to figure
   * out what the associated CSI Driver is, and the default VolumeSnapshotClass
   * associated with that CSI Driver will be used. If more than one VolumeSnapshotClass
   * exist for a given CSI Driver and more than one have been marked
   * as default, CreateSnapshot will fail and generate an event. Empty
   * string is not allowed for this field.
   *
   * @schema VolumeSnapshotSpec#volumeSnapshotClassName
   */
  readonly volumeSnapshotClassName?: string;
}

/**
 * Converts an object of type 'VolumeSnapshotSpec' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_VolumeSnapshotSpec(
  obj: VolumeSnapshotSpec | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "source": toJson_VolumeSnapshotSpecSource(obj.source),
    "volumeSnapshotClassName": obj.volumeSnapshotClassName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * source specifies where a snapshot will be created from. This field is immutable after creation. Required.
 *
 * @schema VolumeSnapshotSpecSource
 */
export interface VolumeSnapshotSpecSource {
  /**
   * persistentVolumeClaimName specifies the name of the PersistentVolumeClaim object representing the volume from which a snapshot should be created. This PVC is assumed to be in the same namespace as the VolumeSnapshot object. This field should be set if the snapshot does not exists, and needs to be created. This field is immutable.
   *
   * @schema VolumeSnapshotSpecSource#persistentVolumeClaimName
   */
  readonly persistentVolumeClaimName?: string;

  /**
   * volumeSnapshotContentName specifies the name of a pre-existing VolumeSnapshotContent object representing an existing volume snapshot. This field should be set if the snapshot already exists and only needs a representation in Kubernetes. This field is immutable.
   *
   * @schema VolumeSnapshotSpecSource#volumeSnapshotContentName
   */
  readonly volumeSnapshotContentName?: string;
}

/**
 * Converts an object of type 'VolumeSnapshotSpecSource' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_VolumeSnapshotSpecSource(
  obj: VolumeSnapshotSpecSource | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "persistentVolumeClaimName": obj.persistentVolumeClaimName,
    "volumeSnapshotContentName": obj.volumeSnapshotContentName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * VolumeSnapshot is a user's request for either creating a point-in-time snapshot of a persistent volume, or binding to a pre-existing snapshot.
 *
 * @schema VolumeSnapshotV1Beta1
 */
export class VolumeSnapshotV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "VolumeSnapshotV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: "snapshot.storage.k8s.io/v1beta1",
    kind: "VolumeSnapshot",
  };

  /**
   * Renders a Kubernetes manifest for "VolumeSnapshotV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: VolumeSnapshotV1Beta1Props): any {
    return {
      ...VolumeSnapshotV1Beta1.GVK,
      ...toJson_VolumeSnapshotV1Beta1Props(props),
    };
  }

  /**
   * Defines a "VolumeSnapshotV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(
    scope: Construct,
    id: string,
    props: VolumeSnapshotV1Beta1Props,
  ) {
    super(scope, id, {
      ...VolumeSnapshotV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public override toJson(): any {
    const resolved = super.toJson();

    return {
      ...VolumeSnapshotV1Beta1.GVK,
      ...toJson_VolumeSnapshotV1Beta1Props(resolved),
    };
  }
}

/**
 * VolumeSnapshot is a user's request for either creating a point-in-time snapshot of a persistent volume, or binding to a pre-existing snapshot.
 *
 * @schema VolumeSnapshotV1Beta1
 */
export interface VolumeSnapshotV1Beta1Props {
  /**
   * @schema VolumeSnapshotV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * spec defines the desired characteristics of a snapshot requested
   * by a user. More info: https://kubernetes.io/docs/concepts/storage/volume-snapshots#volumesnapshots
   * Required.
   *
   * @schema VolumeSnapshotV1Beta1#spec
   */
  readonly spec: VolumeSnapshotV1Beta1Spec;
}

/**
 * Converts an object of type 'VolumeSnapshotV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_VolumeSnapshotV1Beta1Props(
  obj: VolumeSnapshotV1Beta1Props | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "metadata": obj.metadata,
    "spec": toJson_VolumeSnapshotV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * spec defines the desired characteristics of a snapshot requested
 * by a user. More info: https://kubernetes.io/docs/concepts/storage/volume-snapshots#volumesnapshots
 * Required.
 *
 * @schema VolumeSnapshotV1Beta1Spec
 */
export interface VolumeSnapshotV1Beta1Spec {
  /**
   * source specifies where a snapshot will be created from. This field is immutable after creation. Required.
   *
   * @schema VolumeSnapshotV1Beta1Spec#source
   */
  readonly source: VolumeSnapshotV1Beta1SpecSource;

  /**
   * VolumeSnapshotClassName is the name of the VolumeSnapshotClass
   * requested by the VolumeSnapshot. VolumeSnapshotClassName may be
   * left nil to indicate that the default SnapshotClass should be used.
   * A given cluster may have multiple default Volume SnapshotClasses:
   * one default per CSI Driver. If a VolumeSnapshot does not specify
   * a SnapshotClass, VolumeSnapshotSource will be checked to figure
   * out what the associated CSI Driver is, and the default VolumeSnapshotClass
   * associated with that CSI Driver will be used. If more than one VolumeSnapshotClass
   * exist for a given CSI Driver and more than one have been marked
   * as default, CreateSnapshot will fail and generate an event. Empty
   * string is not allowed for this field.
   *
   * @schema VolumeSnapshotV1Beta1Spec#volumeSnapshotClassName
   */
  readonly volumeSnapshotClassName?: string;
}

/**
 * Converts an object of type 'VolumeSnapshotV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_VolumeSnapshotV1Beta1Spec(
  obj: VolumeSnapshotV1Beta1Spec | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "source": toJson_VolumeSnapshotV1Beta1SpecSource(obj.source),
    "volumeSnapshotClassName": obj.volumeSnapshotClassName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * source specifies where a snapshot will be created from. This field is immutable after creation. Required.
 *
 * @schema VolumeSnapshotV1Beta1SpecSource
 */
export interface VolumeSnapshotV1Beta1SpecSource {
  /**
   * persistentVolumeClaimName specifies the name of the PersistentVolumeClaim object representing the volume from which a snapshot should be created. This PVC is assumed to be in the same namespace as the VolumeSnapshot object. This field should be set if the snapshot does not exists, and needs to be created. This field is immutable.
   *
   * @schema VolumeSnapshotV1Beta1SpecSource#persistentVolumeClaimName
   */
  readonly persistentVolumeClaimName?: string;

  /**
   * volumeSnapshotContentName specifies the name of a pre-existing VolumeSnapshotContent object representing an existing volume snapshot. This field should be set if the snapshot already exists and only needs a representation in Kubernetes. This field is immutable.
   *
   * @schema VolumeSnapshotV1Beta1SpecSource#volumeSnapshotContentName
   */
  readonly volumeSnapshotContentName?: string;
}

/**
 * Converts an object of type 'VolumeSnapshotV1Beta1SpecSource' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_VolumeSnapshotV1Beta1SpecSource(
  obj: VolumeSnapshotV1Beta1SpecSource | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "persistentVolumeClaimName": obj.persistentVolumeClaimName,
    "volumeSnapshotContentName": obj.volumeSnapshotContentName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * VolumeSnapshotClass specifies parameters that a underlying storage system uses when creating a volume snapshot. A specific VolumeSnapshotClass is used by specifying its name in a VolumeSnapshot object. VolumeSnapshotClasses are non-namespaced
 *
 * @schema VolumeSnapshotClass
 */
export class VolumeSnapshotClass extends ApiObject {
  /**
   * Returns the apiVersion and kind for "VolumeSnapshotClass"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: "snapshot.storage.k8s.io/v1",
    kind: "VolumeSnapshotClass",
  };

  /**
   * Renders a Kubernetes manifest for "VolumeSnapshotClass".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: VolumeSnapshotClassProps): any {
    return {
      ...VolumeSnapshotClass.GVK,
      ...toJson_VolumeSnapshotClassProps(props),
    };
  }

  /**
   * Defines a "VolumeSnapshotClass" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(
    scope: Construct,
    id: string,
    props: VolumeSnapshotClassProps,
  ) {
    super(scope, id, {
      ...VolumeSnapshotClass.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public override toJson(): any {
    const resolved = super.toJson();

    return {
      ...VolumeSnapshotClass.GVK,
      ...toJson_VolumeSnapshotClassProps(resolved),
    };
  }
}

/**
 * VolumeSnapshotClass specifies parameters that a underlying storage system uses when creating a volume snapshot. A specific VolumeSnapshotClass is used by specifying its name in a VolumeSnapshot object. VolumeSnapshotClasses are non-namespaced
 *
 * @schema VolumeSnapshotClass
 */
export interface VolumeSnapshotClassProps {
  /**
   * @schema VolumeSnapshotClass#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * deletionPolicy determines whether a VolumeSnapshotContent created through the VolumeSnapshotClass should be deleted when its bound VolumeSnapshot is deleted. Supported values are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. Required.
   *
   * @schema VolumeSnapshotClass#deletionPolicy
   */
  readonly deletionPolicy: VolumeSnapshotClassDeletionPolicy;

  /**
   * driver is the name of the storage driver that handles this VolumeSnapshotClass. Required.
   *
   * @schema VolumeSnapshotClass#driver
   */
  readonly driver: string;

  /**
   * parameters is a key-value map with storage driver specific parameters for creating snapshots. These values are opaque to Kubernetes.
   *
   * @schema VolumeSnapshotClass#parameters
   */
  readonly parameters?: { [key: string]: string };
}

/**
 * Converts an object of type 'VolumeSnapshotClassProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_VolumeSnapshotClassProps(
  obj: VolumeSnapshotClassProps | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "metadata": obj.metadata,
    "deletionPolicy": obj.deletionPolicy,
    "driver": obj.driver,
    "parameters": ((obj.parameters) === undefined)
      ? undefined
      : (Object.entries(obj.parameters).reduce(
        (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
        {},
      )),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * deletionPolicy determines whether a VolumeSnapshotContent created through the VolumeSnapshotClass should be deleted when its bound VolumeSnapshot is deleted. Supported values are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. Required.
 *
 * @schema VolumeSnapshotClassDeletionPolicy
 */
export enum VolumeSnapshotClassDeletionPolicy {
  /** Delete */
  DELETE = "Delete",
  /** Retain */
  RETAIN = "Retain",
}

/**
 * VolumeSnapshotClass specifies parameters that a underlying storage system uses when creating a volume snapshot. A specific VolumeSnapshotClass is used by specifying its name in a VolumeSnapshot object. VolumeSnapshotClasses are non-namespaced
 *
 * @schema VolumeSnapshotClassV1Beta1
 */
export class VolumeSnapshotClassV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "VolumeSnapshotClassV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: "snapshot.storage.k8s.io/v1beta1",
    kind: "VolumeSnapshotClass",
  };

  /**
   * Renders a Kubernetes manifest for "VolumeSnapshotClassV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: VolumeSnapshotClassV1Beta1Props): any {
    return {
      ...VolumeSnapshotClassV1Beta1.GVK,
      ...toJson_VolumeSnapshotClassV1Beta1Props(props),
    };
  }

  /**
   * Defines a "VolumeSnapshotClassV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(
    scope: Construct,
    id: string,
    props: VolumeSnapshotClassV1Beta1Props,
  ) {
    super(scope, id, {
      ...VolumeSnapshotClassV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public override toJson(): any {
    const resolved = super.toJson();

    return {
      ...VolumeSnapshotClassV1Beta1.GVK,
      ...toJson_VolumeSnapshotClassV1Beta1Props(resolved),
    };
  }
}

/**
 * VolumeSnapshotClass specifies parameters that a underlying storage system uses when creating a volume snapshot. A specific VolumeSnapshotClass is used by specifying its name in a VolumeSnapshot object. VolumeSnapshotClasses are non-namespaced
 *
 * @schema VolumeSnapshotClassV1Beta1
 */
export interface VolumeSnapshotClassV1Beta1Props {
  /**
   * @schema VolumeSnapshotClassV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * deletionPolicy determines whether a VolumeSnapshotContent created through the VolumeSnapshotClass should be deleted when its bound VolumeSnapshot is deleted. Supported values are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. Required.
   *
   * @schema VolumeSnapshotClassV1Beta1#deletionPolicy
   */
  readonly deletionPolicy: VolumeSnapshotClassV1Beta1DeletionPolicy;

  /**
   * driver is the name of the storage driver that handles this VolumeSnapshotClass. Required.
   *
   * @schema VolumeSnapshotClassV1Beta1#driver
   */
  readonly driver: string;

  /**
   * parameters is a key-value map with storage driver specific parameters for creating snapshots. These values are opaque to Kubernetes.
   *
   * @schema VolumeSnapshotClassV1Beta1#parameters
   */
  readonly parameters?: { [key: string]: string };
}

/**
 * Converts an object of type 'VolumeSnapshotClassV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_VolumeSnapshotClassV1Beta1Props(
  obj: VolumeSnapshotClassV1Beta1Props | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "metadata": obj.metadata,
    "deletionPolicy": obj.deletionPolicy,
    "driver": obj.driver,
    "parameters": ((obj.parameters) === undefined)
      ? undefined
      : (Object.entries(obj.parameters).reduce(
        (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
        {},
      )),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * deletionPolicy determines whether a VolumeSnapshotContent created through the VolumeSnapshotClass should be deleted when its bound VolumeSnapshot is deleted. Supported values are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. Required.
 *
 * @schema VolumeSnapshotClassV1Beta1DeletionPolicy
 */
export enum VolumeSnapshotClassV1Beta1DeletionPolicy {
  /** Delete */
  DELETE = "Delete",
  /** Retain */
  RETAIN = "Retain",
}

/**
 * VolumeSnapshotContent represents the actual "on-disk" snapshot object in the underlying storage system
 *
 * @schema VolumeSnapshotContent
 */
export class VolumeSnapshotContent extends ApiObject {
  /**
   * Returns the apiVersion and kind for "VolumeSnapshotContent"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: "snapshot.storage.k8s.io/v1",
    kind: "VolumeSnapshotContent",
  };

  /**
   * Renders a Kubernetes manifest for "VolumeSnapshotContent".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: VolumeSnapshotContentProps): any {
    return {
      ...VolumeSnapshotContent.GVK,
      ...toJson_VolumeSnapshotContentProps(props),
    };
  }

  /**
   * Defines a "VolumeSnapshotContent" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(
    scope: Construct,
    id: string,
    props: VolumeSnapshotContentProps,
  ) {
    super(scope, id, {
      ...VolumeSnapshotContent.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public override toJson(): any {
    const resolved = super.toJson();

    return {
      ...VolumeSnapshotContent.GVK,
      ...toJson_VolumeSnapshotContentProps(resolved),
    };
  }
}

/**
 * VolumeSnapshotContent represents the actual "on-disk" snapshot object in the underlying storage system
 *
 * @schema VolumeSnapshotContent
 */
export interface VolumeSnapshotContentProps {
  /**
   * @schema VolumeSnapshotContent#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * spec defines properties of a VolumeSnapshotContent created by the underlying storage system. Required.
   *
   * @schema VolumeSnapshotContent#spec
   */
  readonly spec: VolumeSnapshotContentSpec;
}

/**
 * Converts an object of type 'VolumeSnapshotContentProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_VolumeSnapshotContentProps(
  obj: VolumeSnapshotContentProps | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "metadata": obj.metadata,
    "spec": toJson_VolumeSnapshotContentSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * spec defines properties of a VolumeSnapshotContent created by the underlying storage system. Required.
 *
 * @schema VolumeSnapshotContentSpec
 */
export interface VolumeSnapshotContentSpec {
  /**
   * deletionPolicy determines whether this VolumeSnapshotContent and its physical snapshot on the underlying storage system should be deleted when its bound VolumeSnapshot is deleted. Supported values are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. For dynamically provisioned snapshots, this field will automatically be filled in by the CSI snapshotter sidecar with the "DeletionPolicy" field defined in the corresponding VolumeSnapshotClass. For pre-existing snapshots, users MUST specify this field when creating the VolumeSnapshotContent object. Required.
   *
   * @schema VolumeSnapshotContentSpec#deletionPolicy
   */
  readonly deletionPolicy: VolumeSnapshotContentSpecDeletionPolicy;

  /**
   * driver is the name of the CSI driver used to create the physical snapshot on the underlying storage system. This MUST be the same as the name returned by the CSI GetPluginName() call for that driver. Required.
   *
   * @schema VolumeSnapshotContentSpec#driver
   */
  readonly driver: string;

  /**
   * source specifies whether the snapshot is (or should be) dynamically provisioned or already exists, and just requires a Kubernetes object representation. This field is immutable after creation. Required.
   *
   * @schema VolumeSnapshotContentSpec#source
   */
  readonly source: VolumeSnapshotContentSpecSource;

  /**
   * SourceVolumeMode is the mode of the volume whose snapshot is taken. Can be either “Filesystem” or “Block”. If not specified, it indicates the source volume's mode is unknown. This field is immutable. This field is an alpha field.
   *
   * @schema VolumeSnapshotContentSpec#sourceVolumeMode
   */
  readonly sourceVolumeMode?: string;

  /**
   * name of the VolumeSnapshotClass from which this snapshot was (or will be) created. Note that after provisioning, the VolumeSnapshotClass may be deleted or recreated with different set of values, and as such, should not be referenced post-snapshot creation.
   *
   * @schema VolumeSnapshotContentSpec#volumeSnapshotClassName
   */
  readonly volumeSnapshotClassName?: string;

  /**
   * volumeSnapshotRef specifies the VolumeSnapshot object to which this VolumeSnapshotContent object is bound. VolumeSnapshot.Spec.VolumeSnapshotContentName field must reference to this VolumeSnapshotContent's name for the bidirectional binding to be valid. For a pre-existing VolumeSnapshotContent object, name and namespace of the VolumeSnapshot object MUST be provided for binding to happen. This field is immutable after creation. Required.
   *
   * @schema VolumeSnapshotContentSpec#volumeSnapshotRef
   */
  readonly volumeSnapshotRef: VolumeSnapshotContentSpecVolumeSnapshotRef;
}

/**
 * Converts an object of type 'VolumeSnapshotContentSpec' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_VolumeSnapshotContentSpec(
  obj: VolumeSnapshotContentSpec | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "deletionPolicy": obj.deletionPolicy,
    "driver": obj.driver,
    "source": toJson_VolumeSnapshotContentSpecSource(obj.source),
    "sourceVolumeMode": obj.sourceVolumeMode,
    "volumeSnapshotClassName": obj.volumeSnapshotClassName,
    "volumeSnapshotRef": toJson_VolumeSnapshotContentSpecVolumeSnapshotRef(
      obj.volumeSnapshotRef,
    ),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * deletionPolicy determines whether this VolumeSnapshotContent and its physical snapshot on the underlying storage system should be deleted when its bound VolumeSnapshot is deleted. Supported values are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. For dynamically provisioned snapshots, this field will automatically be filled in by the CSI snapshotter sidecar with the "DeletionPolicy" field defined in the corresponding VolumeSnapshotClass. For pre-existing snapshots, users MUST specify this field when creating the VolumeSnapshotContent object. Required.
 *
 * @schema VolumeSnapshotContentSpecDeletionPolicy
 */
export enum VolumeSnapshotContentSpecDeletionPolicy {
  /** Delete */
  DELETE = "Delete",
  /** Retain */
  RETAIN = "Retain",
}

/**
 * source specifies whether the snapshot is (or should be) dynamically provisioned or already exists, and just requires a Kubernetes object representation. This field is immutable after creation. Required.
 *
 * @schema VolumeSnapshotContentSpecSource
 */
export interface VolumeSnapshotContentSpecSource {
  /**
   * snapshotHandle specifies the CSI "snapshot_id" of a pre-existing snapshot on the underlying storage system for which a Kubernetes object representation was (or should be) created. This field is immutable.
   *
   * @schema VolumeSnapshotContentSpecSource#snapshotHandle
   */
  readonly snapshotHandle?: string;

  /**
   * volumeHandle specifies the CSI "volume_id" of the volume from which a snapshot should be dynamically taken from. This field is immutable.
   *
   * @schema VolumeSnapshotContentSpecSource#volumeHandle
   */
  readonly volumeHandle?: string;
}

/**
 * Converts an object of type 'VolumeSnapshotContentSpecSource' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_VolumeSnapshotContentSpecSource(
  obj: VolumeSnapshotContentSpecSource | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "snapshotHandle": obj.snapshotHandle,
    "volumeHandle": obj.volumeHandle,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * volumeSnapshotRef specifies the VolumeSnapshot object to which this VolumeSnapshotContent object is bound. VolumeSnapshot.Spec.VolumeSnapshotContentName field must reference to this VolumeSnapshotContent's name for the bidirectional binding to be valid. For a pre-existing VolumeSnapshotContent object, name and namespace of the VolumeSnapshot object MUST be provided for binding to happen. This field is immutable after creation. Required.
 *
 * @schema VolumeSnapshotContentSpecVolumeSnapshotRef
 */
export interface VolumeSnapshotContentSpecVolumeSnapshotRef {
  /**
   * API version of the referent.
   *
   * @schema VolumeSnapshotContentSpecVolumeSnapshotRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of
   * an entire object, this string should contain a valid JSON/Go
   * field access statement, such as desiredState.manifest.containers[2].
   * For example, if the object reference is to a container within
   * a pod, this would take on a value like: "spec.containers{name}"
   * (where "name" refers to the name of the container that triggered
   * the event) or if no container name is specified "spec.containers[2]"
   * (container with index 2 in this pod). This syntax is chosen
   * only to have some well-defined way of referencing a part of
   * an object. TODO: this design is not final and this field is
   * subject to change in the future.
   *
   * @schema VolumeSnapshotContentSpecVolumeSnapshotRef#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema VolumeSnapshotContentSpecVolumeSnapshotRef#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema VolumeSnapshotContentSpecVolumeSnapshotRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema VolumeSnapshotContentSpecVolumeSnapshotRef#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference
   * is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema VolumeSnapshotContentSpecVolumeSnapshotRef#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema VolumeSnapshotContentSpecVolumeSnapshotRef#uid
   */
  readonly uid?: string;
}

/**
 * Converts an object of type 'VolumeSnapshotContentSpecVolumeSnapshotRef' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_VolumeSnapshotContentSpecVolumeSnapshotRef(
  obj: VolumeSnapshotContentSpecVolumeSnapshotRef | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "apiVersion": obj.apiVersion,
    "fieldPath": obj.fieldPath,
    "kind": obj.kind,
    "name": obj.name,
    "namespace": obj.namespace,
    "resourceVersion": obj.resourceVersion,
    "uid": obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * VolumeSnapshotContent represents the actual "on-disk" snapshot object in the underlying storage system
 *
 * @schema VolumeSnapshotContentV1Beta1
 */
export class VolumeSnapshotContentV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "VolumeSnapshotContentV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: "snapshot.storage.k8s.io/v1beta1",
    kind: "VolumeSnapshotContent",
  };

  /**
   * Renders a Kubernetes manifest for "VolumeSnapshotContentV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: VolumeSnapshotContentV1Beta1Props): any {
    return {
      ...VolumeSnapshotContentV1Beta1.GVK,
      ...toJson_VolumeSnapshotContentV1Beta1Props(props),
    };
  }

  /**
   * Defines a "VolumeSnapshotContentV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(
    scope: Construct,
    id: string,
    props: VolumeSnapshotContentV1Beta1Props,
  ) {
    super(scope, id, {
      ...VolumeSnapshotContentV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public override toJson(): any {
    const resolved = super.toJson();

    return {
      ...VolumeSnapshotContentV1Beta1.GVK,
      ...toJson_VolumeSnapshotContentV1Beta1Props(resolved),
    };
  }
}

/**
 * VolumeSnapshotContent represents the actual "on-disk" snapshot object in the underlying storage system
 *
 * @schema VolumeSnapshotContentV1Beta1
 */
export interface VolumeSnapshotContentV1Beta1Props {
  /**
   * @schema VolumeSnapshotContentV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * spec defines properties of a VolumeSnapshotContent created by the underlying storage system. Required.
   *
   * @schema VolumeSnapshotContentV1Beta1#spec
   */
  readonly spec: VolumeSnapshotContentV1Beta1Spec;
}

/**
 * Converts an object of type 'VolumeSnapshotContentV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_VolumeSnapshotContentV1Beta1Props(
  obj: VolumeSnapshotContentV1Beta1Props | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "metadata": obj.metadata,
    "spec": toJson_VolumeSnapshotContentV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * spec defines properties of a VolumeSnapshotContent created by the underlying storage system. Required.
 *
 * @schema VolumeSnapshotContentV1Beta1Spec
 */
export interface VolumeSnapshotContentV1Beta1Spec {
  /**
   * deletionPolicy determines whether this VolumeSnapshotContent and its physical snapshot on the underlying storage system should be deleted when its bound VolumeSnapshot is deleted. Supported values are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. For dynamically provisioned snapshots, this field will automatically be filled in by the CSI snapshotter sidecar with the "DeletionPolicy" field defined in the corresponding VolumeSnapshotClass. For pre-existing snapshots, users MUST specify this field when creating the  VolumeSnapshotContent object. Required.
   *
   * @schema VolumeSnapshotContentV1Beta1Spec#deletionPolicy
   */
  readonly deletionPolicy: VolumeSnapshotContentV1Beta1SpecDeletionPolicy;

  /**
   * driver is the name of the CSI driver used to create the physical snapshot on the underlying storage system. This MUST be the same as the name returned by the CSI GetPluginName() call for that driver. Required.
   *
   * @schema VolumeSnapshotContentV1Beta1Spec#driver
   */
  readonly driver: string;

  /**
   * source specifies whether the snapshot is (or should be) dynamically provisioned or already exists, and just requires a Kubernetes object representation. This field is immutable after creation. Required.
   *
   * @schema VolumeSnapshotContentV1Beta1Spec#source
   */
  readonly source: VolumeSnapshotContentV1Beta1SpecSource;

  /**
   * name of the VolumeSnapshotClass from which this snapshot was (or will be) created. Note that after provisioning, the VolumeSnapshotClass may be deleted or recreated with different set of values, and as such, should not be referenced post-snapshot creation.
   *
   * @schema VolumeSnapshotContentV1Beta1Spec#volumeSnapshotClassName
   */
  readonly volumeSnapshotClassName?: string;

  /**
   * volumeSnapshotRef specifies the VolumeSnapshot object to which this VolumeSnapshotContent object is bound. VolumeSnapshot.Spec.VolumeSnapshotContentName field must reference to this VolumeSnapshotContent's name for the bidirectional binding to be valid. For a pre-existing VolumeSnapshotContent object, name and namespace of the VolumeSnapshot object MUST be provided for binding to happen. This field is immutable after creation. Required.
   *
   * @schema VolumeSnapshotContentV1Beta1Spec#volumeSnapshotRef
   */
  readonly volumeSnapshotRef: VolumeSnapshotContentV1Beta1SpecVolumeSnapshotRef;
}

/**
 * Converts an object of type 'VolumeSnapshotContentV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_VolumeSnapshotContentV1Beta1Spec(
  obj: VolumeSnapshotContentV1Beta1Spec | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "deletionPolicy": obj.deletionPolicy,
    "driver": obj.driver,
    "source": toJson_VolumeSnapshotContentV1Beta1SpecSource(obj.source),
    "volumeSnapshotClassName": obj.volumeSnapshotClassName,
    "volumeSnapshotRef":
      toJson_VolumeSnapshotContentV1Beta1SpecVolumeSnapshotRef(
        obj.volumeSnapshotRef,
      ),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * deletionPolicy determines whether this VolumeSnapshotContent and its physical snapshot on the underlying storage system should be deleted when its bound VolumeSnapshot is deleted. Supported values are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. For dynamically provisioned snapshots, this field will automatically be filled in by the CSI snapshotter sidecar with the "DeletionPolicy" field defined in the corresponding VolumeSnapshotClass. For pre-existing snapshots, users MUST specify this field when creating the  VolumeSnapshotContent object. Required.
 *
 * @schema VolumeSnapshotContentV1Beta1SpecDeletionPolicy
 */
export enum VolumeSnapshotContentV1Beta1SpecDeletionPolicy {
  /** Delete */
  DELETE = "Delete",
  /** Retain */
  RETAIN = "Retain",
}

/**
 * source specifies whether the snapshot is (or should be) dynamically provisioned or already exists, and just requires a Kubernetes object representation. This field is immutable after creation. Required.
 *
 * @schema VolumeSnapshotContentV1Beta1SpecSource
 */
export interface VolumeSnapshotContentV1Beta1SpecSource {
  /**
   * snapshotHandle specifies the CSI "snapshot_id" of a pre-existing snapshot on the underlying storage system for which a Kubernetes object representation was (or should be) created. This field is immutable.
   *
   * @schema VolumeSnapshotContentV1Beta1SpecSource#snapshotHandle
   */
  readonly snapshotHandle?: string;

  /**
   * volumeHandle specifies the CSI "volume_id" of the volume from which a snapshot should be dynamically taken from. This field is immutable.
   *
   * @schema VolumeSnapshotContentV1Beta1SpecSource#volumeHandle
   */
  readonly volumeHandle?: string;
}

/**
 * Converts an object of type 'VolumeSnapshotContentV1Beta1SpecSource' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_VolumeSnapshotContentV1Beta1SpecSource(
  obj: VolumeSnapshotContentV1Beta1SpecSource | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "snapshotHandle": obj.snapshotHandle,
    "volumeHandle": obj.volumeHandle,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * volumeSnapshotRef specifies the VolumeSnapshot object to which this VolumeSnapshotContent object is bound. VolumeSnapshot.Spec.VolumeSnapshotContentName field must reference to this VolumeSnapshotContent's name for the bidirectional binding to be valid. For a pre-existing VolumeSnapshotContent object, name and namespace of the VolumeSnapshot object MUST be provided for binding to happen. This field is immutable after creation. Required.
 *
 * @schema VolumeSnapshotContentV1Beta1SpecVolumeSnapshotRef
 */
export interface VolumeSnapshotContentV1Beta1SpecVolumeSnapshotRef {
  /**
   * API version of the referent.
   *
   * @schema VolumeSnapshotContentV1Beta1SpecVolumeSnapshotRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of
   * an entire object, this string should contain a valid JSON/Go
   * field access statement, such as desiredState.manifest.containers[2].
   * For example, if the object reference is to a container within
   * a pod, this would take on a value like: "spec.containers{name}"
   * (where "name" refers to the name of the container that triggered
   * the event) or if no container name is specified "spec.containers[2]"
   * (container with index 2 in this pod). This syntax is chosen
   * only to have some well-defined way of referencing a part of
   * an object. TODO: this design is not final and this field is
   * subject to change in the future.
   *
   * @schema VolumeSnapshotContentV1Beta1SpecVolumeSnapshotRef#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema VolumeSnapshotContentV1Beta1SpecVolumeSnapshotRef#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema VolumeSnapshotContentV1Beta1SpecVolumeSnapshotRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema VolumeSnapshotContentV1Beta1SpecVolumeSnapshotRef#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference
   * is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema VolumeSnapshotContentV1Beta1SpecVolumeSnapshotRef#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema VolumeSnapshotContentV1Beta1SpecVolumeSnapshotRef#uid
   */
  readonly uid?: string;
}

/**
 * Converts an object of type 'VolumeSnapshotContentV1Beta1SpecVolumeSnapshotRef' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_VolumeSnapshotContentV1Beta1SpecVolumeSnapshotRef(
  obj: VolumeSnapshotContentV1Beta1SpecVolumeSnapshotRef | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "apiVersion": obj.apiVersion,
    "fieldPath": obj.fieldPath,
    "kind": obj.kind,
    "name": obj.name,
    "namespace": obj.namespace,
    "resourceVersion": obj.resourceVersion,
    "uid": obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
