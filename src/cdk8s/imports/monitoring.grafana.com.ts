// @ts-nocheck
// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from "cdk8s";
import { Construct } from "constructs";

/**
 * PodLogs defines how to collect logs for a Pod.
 *
 * @schema PodLogs
 */
export class PodLogs extends ApiObject {
  /**
   * Returns the apiVersion and kind for "PodLogs"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: "monitoring.grafana.com/v1alpha2",
    kind: "PodLogs",
  };

  /**
   * Renders a Kubernetes manifest for "PodLogs".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: PodLogsProps = {}): any {
    return {
      ...PodLogs.GVK,
      ...toJson_PodLogsProps(props),
    };
  }

  /**
   * Defines a "PodLogs" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: PodLogsProps = {}) {
    super(scope, id, {
      ...PodLogs.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public override toJson(): any {
    const resolved = super.toJson();

    return {
      ...PodLogs.GVK,
      ...toJson_PodLogsProps(resolved),
    };
  }
}

/**
 * PodLogs defines how to collect logs for a Pod.
 *
 * @schema PodLogs
 */
export interface PodLogsProps {
  /**
   * @schema PodLogs#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * PodLogsSpec defines how to collect logs for a Pod.
   *
   * @schema PodLogs#spec
   */
  readonly spec?: PodLogsSpec;
}

/**
 * Converts an object of type 'PodLogsProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_PodLogsProps(
  obj: PodLogsProps | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    metadata: obj.metadata,
    spec: toJson_PodLogsSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * PodLogsSpec defines how to collect logs for a Pod.
 *
 * @schema PodLogsSpec
 */
export interface PodLogsSpec {
  /**
   * Selector to select which namespaces the Pod objects are discovered from.
   *
   * @schema PodLogsSpec#namespaceSelector
   */
  readonly namespaceSelector?: PodLogsSpecNamespaceSelector;

  /**
   * RelabelConfigs to apply to logs before delivering.
   *
   * @schema PodLogsSpec#relabelings
   */
  readonly relabelings?: PodLogsSpecRelabelings[];

  /**
   * Selector to select Pod objects. Required.
   *
   * @schema PodLogsSpec#selector
   */
  readonly selector: PodLogsSpecSelector;
}

/**
 * Converts an object of type 'PodLogsSpec' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_PodLogsSpec(
  obj: PodLogsSpec | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    namespaceSelector: toJson_PodLogsSpecNamespaceSelector(
      obj.namespaceSelector,
    ),
    relabelings: obj.relabelings?.map((y) => toJson_PodLogsSpecRelabelings(y)),
    selector: toJson_PodLogsSpecSelector(obj.selector),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Selector to select which namespaces the Pod objects are discovered from.
 *
 * @schema PodLogsSpecNamespaceSelector
 */
export interface PodLogsSpecNamespaceSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema PodLogsSpecNamespaceSelector#matchExpressions
   */
  readonly matchExpressions?: PodLogsSpecNamespaceSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema PodLogsSpecNamespaceSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };
}

/**
 * Converts an object of type 'PodLogsSpecNamespaceSelector' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_PodLogsSpecNamespaceSelector(
  obj: PodLogsSpecNamespaceSelector | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    matchExpressions: obj.matchExpressions?.map((y) =>
      toJson_PodLogsSpecNamespaceSelectorMatchExpressions(y),
    ),
    matchLabels:
      obj.matchLabels === undefined
        ? undefined
        : Object.entries(obj.matchLabels).reduce(
            (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
            {},
          ),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
 *
 * @schema PodLogsSpecRelabelings
 */
export interface PodLogsSpecRelabelings {
  /**
   * Action to perform based on regex matching. Default is 'replace'. uppercase and lowercase actions require Prometheus >= 2.36.
   *
   * @default replace'. uppercase and lowercase actions require Prometheus >= 2.36.
   * @schema PodLogsSpecRelabelings#action
   */
  readonly action?: PodLogsSpecRelabelingsAction;

  /**
   * Modulus to take of the hash of the source label values.
   *
   * @schema PodLogsSpecRelabelings#modulus
   */
  readonly modulus?: number;

  /**
   * Regular expression against which the extracted value is matched. Default is '(.*)'
   *
   * @default '
   * @schema PodLogsSpecRelabelings#regex
   */
  readonly regex?: string;

  /**
   * Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'
   *
   * @default 1'
   * @schema PodLogsSpecRelabelings#replacement
   */
  readonly replacement?: string;

  /**
   * Separator placed between concatenated source label values. default is ';'.
   *
   * @schema PodLogsSpecRelabelings#separator
   */
  readonly separator?: string;

  /**
   * The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
   *
   * @schema PodLogsSpecRelabelings#sourceLabels
   */
  readonly sourceLabels?: string[];

  /**
   * Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
   *
   * @schema PodLogsSpecRelabelings#targetLabel
   */
  readonly targetLabel?: string;
}

/**
 * Converts an object of type 'PodLogsSpecRelabelings' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_PodLogsSpecRelabelings(
  obj: PodLogsSpecRelabelings | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    action: obj.action,
    modulus: obj.modulus,
    regex: obj.regex,
    replacement: obj.replacement,
    separator: obj.separator,
    sourceLabels: obj.sourceLabels?.map((y) => y),
    targetLabel: obj.targetLabel,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Selector to select Pod objects. Required.
 *
 * @schema PodLogsSpecSelector
 */
export interface PodLogsSpecSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema PodLogsSpecSelector#matchExpressions
   */
  readonly matchExpressions?: PodLogsSpecSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema PodLogsSpecSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };
}

/**
 * Converts an object of type 'PodLogsSpecSelector' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_PodLogsSpecSelector(
  obj: PodLogsSpecSelector | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    matchExpressions: obj.matchExpressions?.map((y) =>
      toJson_PodLogsSpecSelectorMatchExpressions(y),
    ),
    matchLabels:
      obj.matchLabels === undefined
        ? undefined
        : Object.entries(obj.matchLabels).reduce(
            (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
            {},
          ),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PodLogsSpecNamespaceSelectorMatchExpressions
 */
export interface PodLogsSpecNamespaceSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema PodLogsSpecNamespaceSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema PodLogsSpecNamespaceSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema PodLogsSpecNamespaceSelectorMatchExpressions#values
   */
  readonly values?: string[];
}

/**
 * Converts an object of type 'PodLogsSpecNamespaceSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_PodLogsSpecNamespaceSelectorMatchExpressions(
  obj: PodLogsSpecNamespaceSelectorMatchExpressions | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    key: obj.key,
    operator: obj.operator,
    values: obj.values?.map((y) => y),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Action to perform based on regex matching. Default is 'replace'. uppercase and lowercase actions require Prometheus >= 2.36.
 *
 * @default replace'. uppercase and lowercase actions require Prometheus >= 2.36.
 * @schema PodLogsSpecRelabelingsAction
 */
export enum PodLogsSpecRelabelingsAction {
  /** replace */
  REPLACE = "replace",
  /** keep */
  KEEP = "keep",
  /** drop */
  DROP = "drop",
  /** hashmod */
  HASHMOD = "hashmod",
  /** labelmap */
  LABELMAP = "labelmap",
  /** labeldrop */
  LABELDROP = "labeldrop",
  /** labelkeep */
  LABELKEEP = "labelkeep",
  /** lowercase */
  LOWERCASE = "lowercase",
  /** uppercase */
  UPPERCASE = "uppercase",
}

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PodLogsSpecSelectorMatchExpressions
 */
export interface PodLogsSpecSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema PodLogsSpecSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema PodLogsSpecSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema PodLogsSpecSelectorMatchExpressions#values
   */
  readonly values?: string[];
}

/**
 * Converts an object of type 'PodLogsSpecSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_PodLogsSpecSelectorMatchExpressions(
  obj: PodLogsSpecSelectorMatchExpressions | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    key: obj.key,
    operator: obj.operator,
    values: obj.values?.map((y) => y),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
