---
description:
globs:
alwaysApply: true
---
# CI/CD & Automation with Dagger

## Dagger Configuration
- Use Dagger for all CI/CD pipelines as configured in [dagger.json](mdc:dagger.json)
- Access Dagger functions via `.dagger/` directory
- List available targets with `dagger functions`
- Execute targets with `dagger call <target>`

## Available Dagger Targets

### Core Build Targets
- **`build-k-8-s-manifests`** - Builds Kubernetes manifests using CDK8s
- **`build-ha`** - Builds the Home Assistant (HA) app
- **`build-and-apply-cdk-8-s`** - Builds manifests with CDK8s and applies them to cluster

### Quality Assurance
- **`check-all`** - Runs type check, test, and lint for HA, and type check for CDK8s in parallel
- **`lint-ha`** - Lints the Home Assistant app using ESLint

### Deployment
- **`apply-k-8-s-config`** - Applies Kubernetes manifests from specified directory using kubectl
- **`ci`** - Complete CI pipeline: pre-commit, kube-linter, ArgoCD sync, builds, and publishing

### Helm Management
- **`helm-build`** - Builds Helm chart, updates version/appVersion, exports artifacts
- **`helm-publish`** - Publishes packaged Helm chart to ChartMuseum repo

## CI/CD Best Practices

### GitOps Workflow
- Prefer GitOps approach with ArgoCD for deployments
- All changes should flow through Git repositories
- Use ArgoCD for automated synchronization

### Development Environment
- **Dev Environment CI**: When running the `ci` target for dev environment, use dummy values for secrets
- Prevent accidental exposure of real credentials in development
- Enable safe testing with mock values

### Pre-commit Hooks
- Use pre-commit hooks defined in [.pre-commit-config.yaml](mdc:.pre-commit-config.yaml)
- Ensure code quality before commits
- Run linting and formatting checks

### Secret Management
- Use 1Password for secret management
- Never expose real secrets in development environments
- Implement proper secret rotation strategies

### Backup Strategies
- Implement proper backup strategies for stateful workloads
- Test backup and restore procedures regularly
- Document recovery processes

### Quality Gates
- Use kube-linter configuration from [.kube-linter.yaml](mdc:.kube-linter.yaml)
- Ensure all Kubernetes manifests pass linting
- Implement proper testing at each stage

## Automation Guidelines
- Follow Renovate configuration for automated dependency updates
- Use conventional commits for automated changelog generation
- Implement proper versioning strategies
- Consider rollback procedures for all deployments
