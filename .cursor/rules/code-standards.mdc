---
description:
globs:
alwaysApply: true
---
# Code Standards & TypeScript Guidelines

## TypeScript Configuration
- Use strict TypeScript configuration as defined in [tsconfig.json](mdc:src/cdk8s/tsconfig.json)
- Prefer explicit typing over `any` type
- Leverage TypeScript's type system for better code reliability

## Code Style
- **File Names**: Use kebab-case for file names and Kubernetes resource names
- **Variables & Functions**: Use camelCase for TypeScript variables and functions
- **Imports**: Use modern ES modules syntax (`import`/`export`)
- **Functional Programming**: Prefer functional programming patterns where appropriate

## Naming Conventions
- **Kubernetes Resources**: kebab-case (e.g., `my-service`, `my-deployment`)
- **TypeScript**: camelCase (e.g., `myFunction`, `myVariable`)
- **Constants**: UPPER_SNAKE_CASE (e.g., `DEFAULT_PORT`)
- **Types/Interfaces**: PascalCase (e.g., `MyInterface`, `ConfigType`)

## Git Conventions
- Use conventional commits for all commit messages
- Format: `<type>: <description>`
- Types: `feat`, `fix`, `docs`, `refactor`, `chore`, `test`
- Examples:
  - `feat: add new nginx ingress controller`
  - `fix: resolve memory leak in ha service`
  - `docs: update deployment instructions`

## Code Quality
- Follow existing patterns in the codebase
- Use meaningful variable and function names
- Add inline comments for complex Kubernetes configurations
- Implement proper error handling with meaningful error messages
- Consider performance implications of resource usage

## Linting & Formatting
- Follow ESLint configuration in [eslint.config.mjs](mdc:src/ha/eslint.config.mjs)
- Use Prettier configuration from [.prettierrc](mdc:src/ha/.prettierrc)
- Run pre-commit hooks defined in [.pre-commit-config.yaml](mdc:.pre-commit-config.yaml)
